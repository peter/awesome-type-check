#!/usr/bin/env node

const fs = require('fs')

function extractCode (readme) {
  const regex = /^```javascript\s*$(.+?)```\s*$/mgs
  const code = []
  let match = regex.exec(readme)
  while (match != null) {
    code.push(match[1])
    match = regex.exec(readme)
  }
  return code
}

function fixRequire (code) {
  return code.replace(/require\('awesome-type-check'\)/g, "require('src/index')")
}

function injectAssertions (code) {
  return code.split('\n').map(line => {
    const [value, expectedValue] = line.split(/\/\/\s*=>/).map(p => p.trim())
    if (value && expectedValue) {
      if (expectedValue.startsWith('{')) {
        return `{const value = ${value}; const expectedValue = ${expectedValue}; Object.entries(expectedValue).forEach(([k, v]) => expect(value[k]).toEqual(v))}`
      } else {
        return `expect(${value}).toEqual(${expectedValue})`
      }
    } else {
      return line
    }
  }).join('\n')
}

function generateTestCode (codeSnippets) {
  const tests = codeSnippets.map(fixRequire).map(injectAssertions).map((snippet, index) => {
    return `
test('readme code snippet ${index+1} works', () => {
${snippet}
})
    `
  })
  return tests.join('\n\n')
}

const readme = fs.readFileSync('README.md').toString()
const codeSnippets = extractCode(readme)
fs.writeFileSync('test/readme.test.js', generateTestCode(codeSnippets))
